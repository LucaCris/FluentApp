@page "/weather"

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null) {
    <p><em>Loading...</em></p>
}
else {
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem=WeatherForecast
                    ResizableColumns=true AutoFit=true>

        <SelectColumn TGridItem="WeatherForecast"
                      SelectMode="DataGridSelectMode.Multiple"
                      SelectFromEntireRow=true Selectable="(e) => e.TemperatureC > 0"
                      Property="@(e => e.Selected)"
                      OnSelect="@(e => e.Item.Selected = e.Selected)"
                      SelectAll="@(forecasts.All(p => p.Selected))"
                      SelectAllChanged="@(all => forecasts.ToList().ForEach(p => p.Selected = (all == true)))" />

        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Sortable="true" Align="Align.Start" />
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Sortable="true" Align="Align.End" />
    </FluentDataGrid>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 25).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).AsQueryable();
    }

    private class WeatherForecast
    {
        public bool Selected { get; set; }
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
